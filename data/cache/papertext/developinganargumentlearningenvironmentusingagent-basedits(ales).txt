1. ALES architecture. 
 2.1 The Domain Model.
 The domain model is represented in the form of the relational argument database (RADB), it has been developed and implemented by us, see [2, 3] for more details and discussions, which summon a huge number of arguments. These arguments were previously analyzed by experts based on Walton theory using the AIF ontology [6, 11]. The domain model can semantically be represented as a forest of a numerous directed free trees [7]. Each directed tree in the forest lays out a semantic representation for a specific argument analysis. The domain model representation is general enough to encapsulate multiple domains, it also enjoys the extendibility feature, where adding new schemes is permitted. Fig.2 describes the various building blocks concerned with the RADB, using screen shots of our implemented system, such that: (a) the table ”Scheme TBL” gathers the name and the index for different schemes, (b) the table ”Scheme Struct TBL” assembles the details of each scheme in ”Scheme TBL”, (c) the ”Data TBL” table contains the analysis of different arguments based on different scheme structure and preserves the constraints of the AIF ontology [6] (s.t. no information node(I-node) refines another I-node). The relation between those different basic tables is shown in Fig.3. 
 2.2 The Student Model.
 The student model stores details about student’s current problem-solving state and long term knowl- edge progress, that is essential for future student’s performance evaluations. The model considers personal information, pre-test evaluation, and performance history. Personal information contains personal data as name, ID, password, ..., etc. The pre-test evaluation permanently assesses the stu- dent’s argument analysis skills and follows the student progress through learning process. Finally, the performance history implicitly reflects how much the student has done and how well. 
 Fig. 2. The main tables in RADB. 
 Fig. 3. The relation between the main RADB’s tables. 
 2.3 Pedagogical Model.
 The pedagogical model is responsible for reasoning about the student behavior according to the student model, in order to: i) retrieve the most relevant results to both the subject of search and the students’ background, ii) expose the corresponding argument to the selected result, iii) guide the student analysis based on the pre-existing one. The pedagogical model as seen in Fig.1 consists of three main components: a parser, a classifier agent, and a teaching model. 
 2.3.1 Parser.
 The parser as shown in Fig.4(b) receives a statement S from the student. This statement is divided by the parser into tokens, and then the number of tokens is reduced. The tokens are reduced if they belong to a look up table containing a set of all unnecessary words like { a, an, the, he, have, is, him ..., etc }, otherwise it is added to the set of tokens to be sent to the classifier agent. Finally the final crucial set of words { w1 w2... wn } is sent to the classifier agent. The importance of the parser module lies in reducing the set of tokens into a set of significant keywords, which in turn will i) improve the results of the classifier where combinations of unnecessary words vanish, ii)reduce the number of iterations done by the classifier agent. The parser is already implemented as shown in Fig.4(a). 
 2.3.2 Classifier Agent.
 The classifier agent gathers and controls different mining techniques in order to classify the retrieved contexts based on student’s choices. The agent mines the RADB repository aiming to: (i) direct the search process towards hypotheses that are more relevant to student’s subject of search; classifying the analogous arguments in different ways based on students’ choice, seeking for the most relevant arguments to the subject of search. (ii) add flexibility to the retrieving process by offering different search techniques. The agent offers three search techniques: general search, priority search, and rule extraction search. 
 Fig. 4. The parser model.
 In the former, the general search classifies and retrieves the arguments based on the breadth first search technique. The priority search classifies the retrieved contexts based on the maximum support number using an adapted version of the AprioriTid[4] mining technique. In the latter, the rule extraction summarizes the retrieved arguments searching for hidden patterns that are most relevant to the subject of search, then this patterns are exposed in the form of rules. Each rule, for each retrieved argument, contains the affirmative ”+” and the negative ”-” parts relating to the final conclusion of that argument. Priority Search: The AprioriTid algorithm [4] has been implemented and embedded to the clas- sifier agent as ”Priority Search”. The Priority search aims to retrieve the most relevant arguments to the users’ subject of search and queuing them based on the maximum support number, such that the first queued argument is the one that has more itemsets[3] related to the subject of search. Although the AprioriTid algorithm has originally been devised to discover all significant association rules between items in large database transactions, the agent employs its mechanism in the priority search to generate different combinations between different itemsets [4, 3]. These combinations will then be used to classify the retrieved contexts and queued them in a descending order based on its support number. As a response to the priority search purpose, an adapted version of the AprioriTid mining algorithm has been applied. This adapted version, as seen in Fig. 5, considers the single itemset (1-itemset) size as well as the maximum support number usage, rather than k-itemset for k≥2 and the minimum support number ”minsup” mechanism. Fig. 5. An enhanced version of AprioriTid For more clarification, the priority search mines specific parts of the pre-existing arguments based on the users’ search criteria. This search criteria enables the student to seek the premises, conclu- sions or the critical questions lying in the different arguments. For example, suppose the student queries the RADB searching for all information related to ”Iraq war”. Simply, he may write ”the destructive war in Iraq” as the search statement and can choose the conclusion as the search criteria. 
 Fig. 6. The adapted AprioriTid mechanism. 
 In this case, the classifier agent receives the set of significant tokens {destructive, war, iraq} from the parser model. This set is considered as the single size itemset (1-itemset) C1={w1, w2, w3} that contains the most crucial set of words in the search statement. Then, the agent uses the adapted version of the AprioriTid algorithm to generate the different super itemsets C2≤k≤3, which are the different combinations between different tokens. So, the generated super itemsets, as seen in Fig.6, will be the 2-itemset C2={ w1w2, w1w3, w2w3 }, and the 3-itemset C3={ w1w2w3 }. Afterward, the different conclusions in the different arguments trees will be mined seeking for the most relevant set of arguments Ans={d1, d2, ..., dm } such that ∀ di∈D ∃ Ck∈{1,2,..,j}⊆ di . Finally, the results will be queued in a descending order and exposed in a list, where the student can choose the argu- ment name ”Argument 314” from the list to expose the associated context and analysis as in Fig. 10. General Search: The system uses the breadth first [14] search in order to seek the different ar- gument trees and retrieve the most relevant group. The revealed contexts are ordered based on the number of nodes ”nodes cardinality” that contain any keyword, in a way where the first context is the one which has more nodes related to the search statement. For example, suppose the user writes ”the destructive war in Iraq” as a search statement. The revealed contexts, as shown in Fig. 7, will be ordered based on the nodes’ cardinality. The breadth first search seeks each tree in our RADB, preserving the ancestor-descendant relation [7] by searching first the root, then the children in the same level and so on. Finally, if the user picks one of the resulted search arguments, the associated context and analysis are depicted as shown in Fig. 10. Rule Extraction Search: Rule extraction mining is a search technique in which argument trees are encountered to discover all hidden patterns ”embedded subtrees” [7] that coincide with the re- lation between some objects. These objects express a set of the most significant tokens of the user’s subject of search. Precisely, suppose the student wants to report some information about the relation between the ”USA war” and the ”weapons of mass destruction”. At the beginning, the user’s search statements are reduced to the most significant set of tokens by the parser [2][3][1]. Then, the differ- ent argument trees, pre-existing in the RADB repository, are mined in order to fetch these different tokens. Fig. 8(a) shows the analysis of an argument tree, where some enclosed nodes coincide with the student’s search statements, while Fig. 8(b) shows the revealed embedded subtree. 
 Fig. 7. The General search representation form. 
 Fig. 8. The tree Rule Extraction search. 
 Finally, each resulting subtree is expressed in the form of a rule as shown in Fig. 9, where ”+” indicates that this node is a support to the final conclusion whereas ”-” is a rebuttal node to the final conclusion. 
 2.3.3 Teaching Model.
 The teaching model monitors the student actions, guides the learning process and provides the appropriate feedback. However, In the mean time, it is still in the implementation phase. The model starts its role when the classifier agent sends the document Di selected by the student. The teaching model checks, according to the current student model, whether the student is in the learning or the assessing phase. If the student is in the learning phase, the document is presented associated with the corresponding analysis as the shown in Fig. 10. On the other hand, if the student is in the assessment phase, the student is able to do his own analysis, and the teaching model will guide him during analysis by providing personalized feedback whenever required. The feedback aims to guide the student and refine his analysis and intellectual skills. Two kinds of feedback are provided by the teaching model; partial argument negotiation and total argument negotiation. – Case of partial argument negotiation: In this case, the student starts analyzing the argu- ment context in the form of a tree in which the root holds the final conclusion of the issue of discussion. The teaching pedagogy used in this case provides partial hints at each node of the analysis tree. They are results of comparing the student’s current node analysis to the original one in the argument database. These hints are provided before allowing the student to proceed further in the analysis process; they aim to minimize the analysis error ratio, as much as possible, for the current analyzed node. 
 Fig. 9. The representation form of Rule Extraction search result. 
 Fig. 10. The representation of the selected argument. 
 Generally, the teaching model guides with the student via the partial hints at each node till the error of the current node is minimized to a specific ratio. After then, the student is able to move to the next analysis step (i.e., node). – Case of total argument negotiation: The total argument negotiation is similar to the partial argument negotiation. However, the teaching pedagogy is different in that it provides hints only at the end of the analysis process. In other words, after the student builds the full analysis tree for the selected context, the system interprets and evaluates the student’s analysis comparable to the pre-existing one and remarks the errors. Generally, in the assessing phase, the teaching model presents the transcript of the chosen argument associated with an empty tree skeleton and asks the student to start his own analysis. The student starts the analysis by copy and paste text passages from the transcript or enter free text into the nodes. The teaching model traces each node text and divides it into set of significant tokens, then interprets and evaluates the errors ratios comparable to the pre-existing analysis underlying in the RABD. Finally the model provides the feedback, partially or totally, based on the student choice and records the student’s errors for the current transcript, which in turn will be used, by the student model, to evaluate the performance and to follow progress of the student. 
 3 Illustrative Example.
 This example shows a complete run for the Total negotiation of the assessing phase. The system interactions are written in normal font. The student’s actions are in bold. My illustrations to some actions will be in capital letters. SUPPOSE THE STUDENT IN THE ASSESSING PHASE CHOOSING THE TOTAL FEEDBACK PROPERTY. THE SYSTEM WILL GIVE THE STUDENT THE ABILITY TO SELECT SPE- CIFIC SCHEME TO BE USED IN HIS ANALYSIS, AS SHOWN IN Fig. 11. User ”Argument from Verbal Classification Scheme”. 
 Fig. 11. The total negotiation assessment form. 
 THE WHOLE ARGUMENTS, THAT USE THE ”ARGUMENT FROM VERBAL CLASSIFICA- TION SCHEME” IN ITS ANALYSIS, WILL BE LISTED SUCH THAT THE PRIORITY IS TO THE CONTEXTS THAT HAVE NOT BEEN ACCESSED YET BY THE USER DURING THE LEARNING PHASE. System [argument 214, argument 1, argument 600]. User picks up one of the listed arguments, [argument 214] as example. SystemÀ presents the transcript of the chosen argument with an empty tree skeleton as in Fig. 11. User start the analysis by copy and paste text passages from the transcript or enter free text into the nodes then press advice. System divides each statement in each node into tokens, and compares these tokens with the ex- pert analysis for the same node. Then calculates and records the errors ratio for the whole nodes. System shows out a declarative report that describes the mistakes of each node separately. As SEEN IN Fig12 THE STUDENT ANALYSIS OF THE FINAL CONCLUSION NODE ”NODE0” IS PARTIALLY CORRECT AND THE STUDENT HAS BEEN ADVISED TOUSE THESEWORDS IN HIS ANALYSIS {SADDAM, REGION,...}. ALSO IN ”NODE3” WHICH IS ON OF THE CRIT- ICAL QUESTIONS, THE ANALYZED STATEMENT IS CORRECT HOWEVER THE TYPE OF THE NODE (SUPPORT OR ATTACH) IS WRONG. User press OK. AFTER THE USER FINISHES HIS ANALYSIS TO THE WHOLE CONTEXT, FILLING THE SUITABLE ANALYSIS FOR EACHNODE, THE SYSTEMWILL CALCULATES AND RECORDS THEWHOLE ARGUMENTANALYSIS RATIO FOR THATARGUMENT. THIS RATIOS RECORDS WILL BE USED LATER TO EVALUATE THE PROGRESS OF THAT STUDENT. 
 Fig. 12. The resulting report. 
 4 Related Work.
 Early, the field of AI and education was very interesting to most of the researchers, where many instructional systems have been developed to hone students argumentation skills. SCHOLAR and WHY[8] systems are examples for these trials. However, these systems were mainly designed to engage students in a Socratic dialog, which faces significant problems such as knowledge representations to develop a Socratic tutor[8]. This mainly occurred in complex domains like legal reasoning, control or preprocessing, and manipulate the natural language. Later, as a response to these difficulties, a number of argument mapping tools[18, 10, 17, 13] have been developed to foster debate among students about specific argument, using diagrams for argument representation. However, the data mining and artificial intelligence influence, which needed to guide the student to understand the relation between scientific theories and evidence, and refines his argument analysis ability, are missing in these tools. Recently, a number of mining weblogs[9] and case-based models[5] have been proposed to tackle the mining and the artificial influence problem. The mining weblogs is considered as a classification problem for the legal or informal reasoning considering law. Though, it mines the textual data that is intractable to be processed. On the other hand, the case-based argumentation systems, such as the CATO[5], use the case based reasoning method in order to reify the argument structure through tools for analyzing, retrieving, and comparing cases in terms of factors. Comparing CATO with our proposed application, both of them provides examples of specific issue to be studied by the different students, as well as evaluates students’ arguments comparable to the pre-existing one. Regarding to the search for arguments, both systems support students’ search for the existing database, and retrieve the most relevant argument. However, CATO limits the students’ search by a boolean combination of factors. Also, in the full-text retrieval search, one can retrieve documents, by matching phrases, which is not relevant to the search subject. On the other hand, ALES provides different search criteria to tackle this problem, as seen in section 2, using different mining techniques in order to: summon and provide a myriad of arguments at the student’s fingertips, retrieve the most relevant results to the subject of search, and organize the retrieved result such that the most relevant is the first rowed. Finally, I. Rahwan presents the ArgDf system [6, 11], through which users can create, manipu- late, and query arguments using different argumentation schemes. Comparing ArgDf system to our approach, both of them sustain creating new arguments based on existing argument schemes. In addition, the ArgDf system guides the user during the creation process based on the scheme struc- ture only, the user relies on his efforts and his background to analyze the argument. However, in our approach, the user is not only guided by the scheme structure but also by crucial hints devolved through mining techniques. Accordingly, the creation process is restricted by comparing the contrast- ing reconstruction of the user’s analysis and the pre-existing one. Such restriction helps in refining the user’s underlying classification. In the ArgDf system, searching existing arguments is revealed by specifying text in the premises or the conclusion, as well as the type of relationship between them. Then the user can choose to filter arguments based on a specific scheme. Whereas in our approach, searching the existing arguments is not only done by specifying text in the premises or the conclusion but also by providing different strategies based on different mining techniques in order to: refine the learning environment by adding more flexible interoperability, guarantee the retrieval of the most convenient hypotheses relevant to the subject of search, facilitate the search process by providing a different search criteria. 
 5 Conclusion and Future Work.
 In this paper we introduced an agent-based learning environment (ALES) to teach argument analysis. ALES extends the previous work done on building a highly structured argument repertoire (RADB) with managing tool [2, 3]. The main aim of developing this environment is to aid in improving the student’s argument skills. ALES serves as a new trend in teaching arguments. The proposed archi- tecture serves the educational process by allowing learning and assessing phases where personalized feedback is provided. ALES guides the student during argument learning, analysis, and preprocess- ing. In addition, ALES enjoys certain advantage over others, where a relevant and convenient result is assured to be obtained especially when the search statement is in this form: ”the destructive war in Iraq”. In the future, we intend to (i) integrate an NLP software to aid in polarity classification, in which the underlying RADB arguments are classified into affirmative and rebuttal lists to the issue of discussion, (ii) use the frequent tree mining techniques[7] in order to search for frequent patterns in different arguments, and (iii) consider the interaction between the student model and the pedagogical model, and how this is going to affect the abductive learning phase.